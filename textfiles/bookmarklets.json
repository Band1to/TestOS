[
  {
    "name":"MannoNazi",
    "code":"javascript:\nvar authors = document.querySelectorAll(\".content[role='main'] a.author\"),\n    author = authors[0],\n    authorPointer = 0,\n    passes = [],\n    ib = document.querySelector(\".content[role='main']\").firstChild;\n\nfunction parseDuration(str) {\n  var dig = /[0-9]+/g,\n    units = /minute|hour|day|week|month|year/gi;\n  var time = 0,\n    unitMap = {\n      none: 0,\n      minute: 1,\n      hour: 60,\n      day: 1440,\n      week: 10080,\n      month: 43830,\n      year: 525960\n    };\n  while (true) {\n    var newTime = dig.exec(str);\n    if (!newTime) break;\n    var unit = units.exec(str) || [\"none\"];\n    time += 60 * unitMap[unit[0].toLowerCase()] * parseInt(newTime[0]);\n  }\n  return time;\n}\n\nfunction getAuthor() {\n  var xhr = new XMLHttpRequest();\n  xhr.onreadystatechange = function() {\n    if (this.readyState == 4 && this.status == 200) {\n      var data = JSON.parse(xhr.responseText).data;\n      var created = data.created;\n      if (created & gt; minTime) {\n        getThing(author, highlight);\n        getThing(author, addTSBLink);\n        var tag = document.createElement(\"a\");\n        tag.innerHTML = \"(created \" + toTimeString(created) + \") \";\n        tag.href = \"https://layer7.solutions/blacklist/reports/#type=user&subject=\" + author.innerHTML;\n        tag.setAttribute(\"target\", \"_blank\");\n        tag.style.cssText = \"color:#920000; font-weight:bold; text-decoration:none\";\n        author.parentElement.insertBefore(tag, author.nextElementSibling);\n        var karma = document.createElement(\"span\");\n        karma.innerHTML = \"(\" + data.link_karma + \"|\" + data.comment_karma + \") \";\n        karma.setAttribute(\"title\", data.link_karma + \" link karma, \" + data.comment_karma + \" comment karma\");\n        karma.style.cssText = \"color:#000a92; font-weight:bold; cursor:help\";\n        author.parentElement.insertBefore(karma, author.nextElementSibling);\n        var foundDuplicate = false;\n        for (var i = 0; i & lt; passes.length; i++) {\n          if (passes[i].username == author.innerHTML) {\n            foundDuplicate = true;\n            break;\n          }\n        }\n        if (!foundDuplicate) {\n          passes.push({\n            created: toTimeString(created),\n            createdEpoch: created,\n            createdStr: new Date(created * 1000).toString(),\n            username: author.innerHTML,\n            url: author.href,\n            holyShitThisIsSomeSpecificData: data\n          });\n        }\n      } else {\n        getThing(author, hide);\n      }\n      author = authors[++authorPointer];\n      prog.innerHTML = Math.floor(authorPointer / authors.length * 1000) / 10 + \"%\";\n      if (author) getAuthor();\n      else tally();\n    }\n  };\n  xhr.open(\"GET\", author + \"/about.json\", true);\n  xhr.send();\n}\n\nfunction getThing(elem, func) {\n  while (true) {\n    if (elem.classList.contains(\"thing\")) break;\n    else if (elem.tagName == \"BODY\") return;\n    elem = elem.parentElement;\n  }\n  func(elem);\n}\n\nfunction hide(elem) {\n  elem.style.display = \"none\";\n}\n\nfunction highlight(elem) {\n  elem.style.cssText = \"background:#ff8d8d !important; padding:5px !important; border:1px solid #920000 !important\";\n  ib.parentElement.insertBefore(elem, ib.nextElementSibling);\n  ib = elem;\n}\n\nfunction addTSBLink(elem) {\n  if (elem.classList.contains(\"link\")) {\n    var lnk = elem.querySelector(\".title a\").href;\n    if (/youtu.?be/gi.test(lnk)) {\n      var li = document.createElement(\"li\");\n      li.innerHTML = \"&lt;a href='https://layer7.solutions/blacklist/reports/#type=channel&subject=\" + encodeURIComponent(lnk) + \"' target='_blank'&gt;history&lt;/a&gt;\";\n      elem.querySelector(\".flat-list.buttons\").appendChild(li);\n    }\n  }\n}\n\nfunction tally() {\n  console.log(passes);\n  document.body.removeChild(prog);\n  var uCount = passes.length;\n  setTimeout(function() {\n    alert(\"Found \" + uCount + \" user\" + (uCount == 1 ? '' : 's') + \" younger than \" + durStr + \".\nUser data is logged in console.\");\n  }, 10);\n}\n\nfunction toTimeString(epoch) {\n  var time = Math.floor((new Date().getUTCTime() / 1000) - epoch) / 60;\n  var units = [525960, \"year\", 43830, \"month\", 1440, \"day\", 60, \"hour\", 1, \"minute\"],\n    out = [];\n  for (var i = 0; i & lt; units.length; i += 2) {\n    var newTime = Math.floor(time / units[i]);\n    if (newTime) out.push(newTime + \" \" + units[i + 1] + (newTime == 1 ? '' : 's'));\n    time = time % units[i]\n  }\n  out = out.splice(0, 3);\n  return out.join(\", \") + \" ago\";\n}\n\nfunction quit() {\n  authorPointer = 10000000;\n}\nDate.prototype.getUTCTime = function() {\n  return this.getTime() + this.getTimezoneOffset() * 60000;\n};\nvar durStr = prompt(\"Enter maximum age.\nPress the white box in the upper left corner to quit.\", \"1 day\");\nif (durStr) {\n  var minTime = Math.floor(new Date().getUTCTime() / 1000) - parseDuration(durStr);\n  if (confirm(\"Searching for users made later than \" + toTimeString(minTime * 1000) + \".\nProceed?\")) {\n    var prog = document.createElement(\"div\");\n    prog.style.cssText = \"position:fixed; top:0; left:0; font-family:Arial,sans-serif; background:white; font-size:20px; padding:5px 10px; color:#777; border:1px solid #ccc; z-index:1000000; cursor:pointer\";\n    prog.onclick = quit;\n    prog.innerHTML = \"0%\";\n    document.body.appendChild(prog);\n    getAuthor();\n  }\n}",
    "description":"Input a duration, and the script will throw all comments or posts from accounts made within that duration to the top of the page and hide the rest for easy detection of new accounts, spammers, and account farmers.",
    "version":"2.5",
    "notes":"MannoNazi supports duration input in minutes/hours/days/months/years. Example: \"5 years 23 days\" or \"34 hours 2 days\". The order doesn't matter and you will be given an interpreted duration before the analysis begins.",
    "changelog":"This is the first public version of this bookmarklet.",
    "published":"1500000000"
  },
  {
    "name":"Lookup",
    "code":"javascript: (function() { var uData = [], counter = 0, uniques = []; var users = document.querySelectorAll(\".commentarea .sitetable .author:not(.counted)\"); var cf = prompt(\"Found \"+users.length+\" users.\\nEnter subreddit. Leave blank for full list.\\nTo check for multiple subs, separate by commas.\\nCheck console for data dump.\"); if (cf==null) return; cf=cf.replace(/ /, \"\"); var regex = new RegExp(\"^(\" + cf.replace(/,/g, \"|\") + \")$\", \"gim\"); var prog = document.getElementById(\"progresscounter\"), slider; if (prog) prog.parentElement.removeChild(prog); var prog = document.createElement(\"div\"); prog.id = \"progresscounter\"; prog.style.cssText = \"position:fixed; width:100%; height:2em; top:0; left:0; line-height:2em; text-align:center; color:black; background:white; border-bottom:1px solid #ccc; z-index:20000000\"; slider = document.createElement(\"div\"); prog.appendChild(slider); var data = document.createElement(\"div\"); data.style.cssText = \"position:fixed; top:0; width:100%\"; prog.appendChild(data); document.body.appendChild(prog); prog = data; prog.style.display = \"block\"; slider.style.cssText = \"position:absolute; height:100%; width:0; background:#ccf\"; function getUserData() { if (counter == users.length) { if (cf) tally(); console.log(uData); prog.parentElement.style.display = \"none\"; return; } else { var perc = Math.ceil((counter + 1) / users.length * 100); slider.style.width = perc + \"%\"; prog.innerHTML = \"Collecting data from users: \" + (counter + 1) + \"/\" + users.length + \" (\" + perc + \"%)\"; } var xhttp = new XMLHttpRequest(), parent = users[counter]; xhttp.onreadystatechange = function() { if (this.readyState == 4 && this.status == 200) { var uD = JSON.parse(xhttp.responseText).data.children, out = []; for (var i = 0; i &lt; uD.length; i++) { out.push(uD[i].data.subreddit); } uData.push(out, users[counter - 1]); getUserData(); } else if (this.readyState == 4 && this.status == 404) { getUserData(); } }; xhttp.open(\"GET\", \"https://www.reddit.com/user/\" + users[counter].innerHTML + \"/.json\", true); xhttp.send(); users[counter].classList.add(\"counted\"); counter++; } function tally() { var matches = 0, totals = 0; for (var i = 0; i &lt; uData.length; i += 2) { var elem = uData[i + 1].parentElement.parentElement.parentElement; if (!elem) continue; var subs = []; for (var n = 0; n &lt; uData[i].length; n++) { totals++; if (regex.test(uData[i][n])) { matches++; appendElem(uData[i][n], subs); } } if (subs.length &gt; 0) { elem.getElementsByClassName(\"author\")[0].innerHTML += \" &lt;i style='color:white'&gt;(\" + subs.join(\",\") + \")&lt;/i&gt;\"; appendElem(uData[i + 1].innerHTML, uniques); elem.style.cssText = getDepth(elem) % 2 == 0 ? \"background:#fc0 !important\" : \"background:orange !important\"; } } cf = ((/,/).test(cf)) ? \"[\" + cf + \"]\" : cf; var outStr = \"Matched \" + cf + \" in \" + matches + \"/\" + totals + \" (\" + Math.round(matches / totals * 10000) / 100 + \"%) comments.\\n\" + uniques.length + \" (\" + Math.round(uniques.length / uData.length * 20000) / 100 + \"%) unique users have recent history in \" + cf + \".\\n\"; alert(outStr); console.log(outStr); } function appendElem(elem, arr) { for (var i in arr) { if (arr[i] == elem) return; } arr.push(elem); } function getDepth(elem) { var len = 0; while (!elem.classList.contains(\"nestedlisting\")) { len++; elem = elem.parentElement; } return len; } getUserData(); })();",
    "description":"Input one or many subreddit names and the script will find all users on the page with recent history in any of the subreddits.",
    "version":"3",
    "notes":"Separate subreddit names by commas to browse many subs. The names are not case sensitive.",
    "changelog":"This is the first public version of this bookmarklet.",
    "published":"1500000000"
  },
  {
    "name":"Anon",
    "code":"javascript:(function(){var usernames=document.querySelectorAll(\".content[role=main] .md a[href*='/u/'],.content[role=main] .md a[href*='/user/'], .md a[href*='/u/'], .sitetable .author[href*='/user/'], a[class*='_author'], .ModAction__author\"),ids=[],names=[]; var op=\"\"; var opDOM=document.querySelector(\".single-page .thing.link\"); if (opDOM!=null){op=opDOM.getAttribute(\"data-author\");} var style=document.createElement(\"style\"); style.innerHTML=\".hiddenuser{display: inline-block; padding: 0 5px !important; font-weight: bold; font-size:12px !important; border-radius:0 !important; height: 17px; line-height: 17px; box-sizing:content-box !important;} .tb-bracket-button, .flair{display:none !important;} #user_popup {display: block; position: fixed; width: 200px; background-color: #f5f5f5; padding: 10px; text-align: center; border: 1px solid #ddd; font-size: 13px; z-index: 100; left: 10px; bottom: -100px; box-shadow: 2px 2px 10px rgba(0,0,0,0.1); line-height: 25px; animation: move 10s forwards 1;} #user_popup .highlighted {padding: 2px 6px; color: white; background-color: #ccc;} @keyframes move{0%{bottom: -100px;} 5%{bottom: 10px;} 95%{bottom: 10px;} 100%{bottom: -100px;}}\"; document.body.appendChild(style); for (var i=0;i&lt;usernames.length;i++){ var href=usernames[i].className==\"ModAction__author\"?usernames[i].textContent:usernames[i].href; var arr=href.includes(\"/u/\")?href.split(\"/u/\"):href.split(\"/user/\"); var name=arr[arr.length-1].replace(/\//g,''); ids.push(getId(name)); usernames[i].classList.add(\"hiddenuser\"); usernames[i].innerHTML=name==op?\"OP\":\"User \"+(ids[i]+(op!=''?0:1)); } for (var i=0;i&lt;usernames.length;i++){ setColor(usernames[i],ids[i]); } var popup=document.createElement(\"div\"); popup.id=\"user_popup\"; popup.innerHTML=\"&lt;span class='highlighted'&gt;\"+usernames.length+\"&lt;/span&gt; overlays added and&lt;br&gt;&lt;span class='highlighted'&gt;\"+names.length+\"&lt;/span&gt; users hidden\"; document.body.appendChild(popup); function getId(name){ for (var i=0;i&lt;names.length;i++){ if (name==names[i]){return i} } names.push(name); return names.length-1; } function setColor(dom,id){ var colors=[[255,0,0],[0,255,0],[0,0,255]],quot=id/names.length; var offs=Math.floor(quot/0.5); quot=(quot%0.5)*2; dom.style.cssText=\"background-color: rgb(\"+Math.floor(colors[offs][0]+(colors[offs+1][0]-colors[offs][0])*quot)+\",\"+Math.floor(colors[offs][1]+(colors[offs+1][1]-colors[offs][1])*quot)+\",\"+Math.floor(colors[offs][2]+(colors[offs+1][2]-colors[offs][2])*quot)+\") !important; color: white !important\"; }})();",
    "description":"Hides all usernames on the page and numbers and color codes them for clarity.",
    "version":"2",
    "notes":"Should also work in MannoMail.",
    "changelog":"This is the first public version of this bookmarklet.",
    "published":"1500000000"
  },
  {
    "name":"Nuke",
    "code":"javascript:(function(){var prevElem=document.body,hover=true; if (!document.body.classList.contains(\"event_added\")){ document.body.addEventListener(\"mousemove\",function(event){if (hover){var element=findThing(event.target); prevElem.style=\"\"; element.style=\"background-color: rgba(255,0,0,0.5)!important\"; prevElem=element}}); document.body.addEventListener(\"click\",function(){ if (hover){ hover=false; var action=confirm(\"Do you want to remove this comment and its children?\\n\\nNote: the script sends an alert when it's finished. Let it work.\\n\"); if (action){ var removeBtns=prevElem.getElementsByClassName(\"remove-button\"); var count=1; var thread=setInterval(rem,500); function rem(){ removeBtns[count].getElementsByClassName(\"yes\")[0].click(); count+=2; if (count&gt;=removeBtns.length){ clearInterval(thread); prevElem.style=\"\"; setTimeout(function(){alert(\"Removed \"+removeBtns.length/2+\" comments\");},500); } } }else{ prevElem.style=\"\"; } } }); } document.body.classList.add(\"event_added\"); function findThing(elem){ var findElem=elem; try{ for (var i=0;i&lt;10;i++){ if (findElem.classList.contains(\"thing\")){return findElem;} findElem=findElem.parentElement; } }catch(e){} return elem; }})()",
    "description":"Simply removes a comment and all its visible children.",
    "version":"1",
    "notes":"Toolbox has this feature implemented.",
    "changelog":"This is the first public version of this bookmarklet.",
    "published":"1500000000"
  }
]
